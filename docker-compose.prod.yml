services:
  php-fpm:
    image: ${REGISTRY_URL:-ghcr.io}/${REGISTRY_NAMESPACE:-alexzerabr}/easyappointments:${IMAGE_TAG:-latest}
    # build: 
    #   context: .
    #   dockerfile: docker/php-fpm/Dockerfile
    #   target: production
    working_dir: /var/www/html
    volumes:
      - './storage:/var/www/html/storage'
      - './config.php:/var/www/html/config.php:ro'
      - './docker/php-fpm/php-ini-production.ini:/usr/local/etc/php/conf.d/99-overrides.ini'
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
      - WA_TOKEN_ENC_KEY=${WA_TOKEN_ENC_KEY}
      - DB_HOST=mysql
      - DB_PORT=${DB_PORT:-3306}
      - DB_DATABASE=${DB_DATABASE:-easyappointments}
      - DB_USERNAME=${DB_USERNAME:-easyapp_user}
      - DB_PASSWORD=${DB_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
    depends_on:
      mysql:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app-network

  nginx:
    image: 'nginx:1.25-alpine'
    working_dir: /var/www/html
    volumes:
      - '.:/var/www/html:ro'
      - './docker/nginx/nginx-production.conf:/etc/nginx/conf.d/default.conf'
      - './storage/logs/nginx:/var/log/nginx'
    ports:
      - '${HTTP_PORT:-80}:80'
      - '${HTTPS_PORT:-443}:443'
    depends_on:
      - php-fpm
    restart: unless-stopped
    networks:
      - app-network

  mysql:
    image: 'mysql:8.0'
    volumes:
      - 'mysql_data:/var/lib/mysql'
      - './docker/mysql-config/production.cnf:/etc/mysql/conf.d/production.cnf'
    ports:
      - '${MYSQL_PORT:-3306}:3306'
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${DB_DATABASE:-easyappointments}
      - MYSQL_USER=${DB_USERNAME:-user}
      - MYSQL_PASSWORD=${DB_PASSWORD}
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "127.0.0.1", "-u${DB_USERNAME:-user}", "-p${DB_PASSWORD}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - app-network

  whatsapp-worker:
    image: ${REGISTRY_URL:-ghcr.io}/${REGISTRY_NAMESPACE:-alexzerabr}/easyappointments:${IMAGE_TAG:-latest}
    # build: 
    #   context: .
    #   dockerfile: docker/php-fpm/Dockerfile
    #   target: production
    working_dir: /var/www/html
    volumes:
      - './storage:/var/www/html/storage'
      - './config.php:/var/www/html/config.php:ro'
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
      - WA_TOKEN_ENC_KEY=${WA_TOKEN_ENC_KEY}
      - DB_HOST=mysql
      - DB_PORT=${DB_PORT:-3306}
      - DB_DATABASE=${DB_DATABASE:-easyappointments}
      - DB_USERNAME=${DB_USERNAME:-easyapp_user}
      - DB_PASSWORD=${DB_PASSWORD}
      - WPPCONNECT_TIMEOUT=${WPPCONNECT_TIMEOUT:-30}
      - WPPCONNECT_CONNECT_TIMEOUT=${WPPCONNECT_CONNECT_TIMEOUT:-10}
    restart: unless-stopped
    depends_on:
      mysql:
        condition: service_healthy
    command: ["php", "scripts/whatsapp_worker.php"]
    networks:
      - app-network

  logrotate:
    image: alpine:3.18
    working_dir: /var/www/html
    volumes:
      - './storage/logs:/var/www/html/storage/logs'
      - './docker/logrotate:/var/www/html/docker/logrotate'
    restart: unless-stopped
    depends_on:
      - whatsapp-worker
    command: ["/bin/sh", "-lc", "apk add --no-cache logrotate >/dev/null 2>&1 || true; while true; do logrotate -s /var/tmp/logrotate.status /var/www/html/docker/logrotate/whatsapp_worker.conf 2>&1 | sed -e 's/^/[logrotate] /'; sleep 86400; done"]
    networks:
      - app-network

  backup:
    image: alpine:3.18
    volumes:
      - 'mysql_data:/var/lib/mysql:ro'
      - './storage/backups:/backups'
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - DB_DATABASE=${DB_DATABASE:-easyappointments}
    restart: "no"
    networks:
      - app-network
    command: ["/bin/sh", "-c", "echo 'Backup service ready. Run manually with: docker compose -f docker-compose.prod.yml exec backup /bin/sh'"]

volumes:
  mysql_data:
    driver: local

networks:
  app-network:
    driver: bridge
